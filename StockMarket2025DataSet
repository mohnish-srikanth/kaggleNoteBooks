{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceType":"datasetVersion","sourceId":12241473,"datasetId":7713196,"databundleVersionId":12787471,"isSourceIdPinned":false}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:24.763905Z","iopub.execute_input":"2025-07-09T16:38:24.764698Z","iopub.status.idle":"2025-07-09T16:38:25.592734Z","shell.execute_reply.started":"2025-07-09T16:38:24.764669Z","shell.execute_reply":"2025-07-09T16:38:25.591764Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/stock-market-june-2025-dataset/stock_market_june2025.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"pratyushpuri/stock-market-june-2025-dataset\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:25.594326Z","iopub.execute_input":"2025-07-09T16:38:25.594824Z","iopub.status.idle":"2025-07-09T16:38:26.343991Z","shell.execute_reply.started":"2025-07-09T16:38:25.594801Z","shell.execute_reply":"2025-07-09T16:38:26.343100Z"}},"outputs":[{"name":"stdout","text":"Path to dataset files: /kaggle/input/stock-market-june-2025-dataset\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"from pyspark.sql import SparkSession\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.types import IntegerType\nfrom pyspark.sql.types import DateType\nimport pyspark.sql.functions as F\n\nspark = SparkSession.builder.appName(\"SparkRandom\").getOrCreate()\n\ndf = spark.read.format(\"csv\").option(\"header\", True).option(\"inferSchema\", True).load(\"/kaggle/input/stock-market-june-2025-dataset/stock_market_june2025.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:26.344989Z","iopub.execute_input":"2025-07-09T16:38:26.345312Z","iopub.status.idle":"2025-07-09T16:38:42.360904Z","shell.execute_reply.started":"2025-07-09T16:38:26.345286Z","shell.execute_reply":"2025-07-09T16:38:42.359736Z"}},"outputs":[{"name":"stderr","text":"Setting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/07/09 16:38:31 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n                                                                                                    \r","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"df = df.withColumn(\"Volume Traded\", df[\"Volume Traded\"].cast(IntegerType()))\ndf = df.withColumn(\"Market Cap\", df[\"Market Cap\"].cast(IntegerType()))\ndf = df.withColumn(\"PE Ratio\", df[\"PE Ratio\"].cast(IntegerType()))\ndf = df.withColumn(\"Dividend Yield\", df[\"Dividend Yield\"].cast(IntegerType()))\n# df = df.withColumn(\"Date\", df[\"Date\"].cast(DateType()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:42.363928Z","iopub.execute_input":"2025-07-09T16:38:42.364726Z","iopub.status.idle":"2025-07-09T16:38:42.548332Z","shell.execute_reply.started":"2025-07-09T16:38:42.364686Z","shell.execute_reply":"2025-07-09T16:38:42.547223Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# What is the average daily trading volume for each ticker?\n\navgTrdVol = df.groupBy(\"Ticker\").avg(\"Volume Traded\").withColumnRenamed(\"avg(Volume Traded)\", \"avg_volume_traded\")\\\n              .orderBy(\"avg_volume_traded\", ascending = False)\navgTrdVol.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:42.549363Z","iopub.execute_input":"2025-07-09T16:38:42.549635Z","iopub.status.idle":"2025-07-09T16:38:44.516513Z","shell.execute_reply.started":"2025-07-09T16:38:42.549614Z","shell.execute_reply":"2025-07-09T16:38:44.515361Z"}},"outputs":[{"name":"stdout","text":"+------+-----------------+\n|Ticker|avg_volume_traded|\n+------+-----------------+\n| GOOGL|      6.5377735E7|\n| BRK.B|      5.3892654E7|\n|  AAPL|      5.0662192E7|\n|  AMZN|       5.046382E7|\n|  MSFT|      4.8301421E7|\n|  META|      4.7539626E7|\n|   UNH|      4.6928599E7|\n|  TSLA|      3.7631821E7|\n|  NVDA|      2.8192563E7|\n|   JNJ|      1.6888908E7|\n|   SHZ|      1.4994861E7|\n|   NTU|      1.4957319E7|\n|   HSC|      1.4952395E7|\n|   NFK|      1.4951806E7|\n|   IWY|      1.4941498E7|\n|   FDC|      1.4937999E7|\n|   ZZM|      1.4934516E7|\n|   ULO|      1.4924871E7|\n|   NVB|      1.4921281E7|\n|   AXP|      1.4904272E7|\n+------+-----------------+\nonly showing top 20 rows\n\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# Which ticker had the highest single-day closing price in the dataset?\n\nhighestClosingPrice = df.select([\"Ticker\", \"Close Price\"]).orderBy(\"Close Price\", ascending = False)\nhighestClosingPrice.first()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:44.517309Z","iopub.execute_input":"2025-07-09T16:38:44.517623Z","iopub.status.idle":"2025-07-09T16:38:44.915773Z","shell.execute_reply.started":"2025-07-09T16:38:44.517592Z","shell.execute_reply":"2025-07-09T16:38:44.914957Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"Row(Ticker='BRK.B', Close Price=447.43)"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# For each ticker, what is the percentage change in closing price from the first to the last date?\n\nminDate = df.select(F.min(\"Date\")).collect()\nmaxDate = df.select(F.max(\"Date\")).collect()\n\nminDateDf = df.select([\"Ticker\", \"Close Price\"]).filter(F.col(\"Date\") == minDate[0][0]).withColumnRenamed(\"Close Price\", \"Min Date Close Price\")\nmaxDateDf = df.select([\"Ticker\", \"Close Price\"]).filter(F.col(\"Date\") == maxDate[0][0]).withColumnRenamed(\"Close Price\", \"Max Date Close Price\")\n\nminDateDf.show()\nmaxDateDf.show()\n\njoinedDf = minDateDf.join(maxDateDf, minDateDf[\"Ticker\"] == maxDateDf[\"Ticker\"], \"inner\")\njoinedDf.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:44.916542Z","iopub.execute_input":"2025-07-09T16:38:44.916835Z","iopub.status.idle":"2025-07-09T16:38:46.790776Z","shell.execute_reply.started":"2025-07-09T16:38:44.916807Z","shell.execute_reply":"2025-07-09T16:38:46.789596Z"}},"outputs":[{"name":"stdout","text":"+------+--------------------+\n|Ticker|Min Date Close Price|\n+------+--------------------+\n|   SLH|               34.53|\n|   WGB|              208.45|\n|   ZIN|              124.03|\n|   YPY|              265.28|\n|   VKD|              186.89|\n|   PJO|                71.2|\n|   MLK|              202.21|\n|   SFM|               59.34|\n|   PSE|                92.3|\n|   DJF|                16.1|\n|   GPH|               90.51|\n|   FUQ|               70.21|\n|   AOY|              193.54|\n|   PTR|              105.01|\n|   TTA|              210.17|\n|   XAB|              160.57|\n|   IMD|               87.92|\n|   HXJ|              160.38|\n|   RLR|              156.35|\n|   FBR|               93.64|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Ticker|Max Date Close Price|\n+------+--------------------+\n|   SRX|              241.75|\n|   DEO|              220.22|\n|   NXT|              202.63|\n|   QHY|              199.32|\n|   YQL|              229.11|\n|   OYN|               89.66|\n|   OWQ|                94.0|\n|   NIA|              194.22|\n|   UNW|               27.16|\n|   UDR|              235.13|\n|   OES|               16.92|\n|   DFX|               24.56|\n|   XBD|               65.29|\n|   BVF|              115.02|\n|   RDK|                80.6|\n|   AOI|               25.22|\n|   WWN|              125.15|\n|   YGS|               127.8|\n|   GGW|              241.26|\n|   GDG|              164.61|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+------+--------------------+\n|Ticker|Min Date Close Price|Ticker|Max Date Close Price|\n+------+--------------------+------+--------------------+\n+------+--------------------+------+--------------------+\n\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# Which ticker experienced the largest daily price swing (High Price - Low Price) and on which date?\n\nhighestSwing = df.withColumn(\"Swing\", F.col(\"High Price\") - F.col(\"Low Price\"))\nhighestSwing = highestSwing.withColumn(\"Swing\", F.abs(highestSwing[\"Swing\"])).orderBy(\"Swing\", ascending = False)\nhighestSwing = highestSwing.select([\"Ticker\", \"Swing\"])\nhighestSwing.first()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:46.791987Z","iopub.execute_input":"2025-07-09T16:38:46.792911Z","iopub.status.idle":"2025-07-09T16:38:47.021290Z","shell.execute_reply.started":"2025-07-09T16:38:46.792850Z","shell.execute_reply":"2025-07-09T16:38:47.020611Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Row(Ticker='META', Swing=23.150000000000034)"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"# Calculate the rolling 7-day average closing price for each ticker.\n\nwindowSpec = Window.partitionBy(\"Ticker\").orderBy(\"Date\").rowsBetween(-6, 0)\nrollingAvg = df.withColumn(\"7 Day Rolling Average\", F.avg(F.col(\"Close Price\")).over(windowSpec))\nrollingAvg = rollingAvg.select([\"Date\", \"Ticker\", \"Close Price\", \"7 Day Rolling Average\"]).orderBy([\"Ticker\"])\nrollingAvg.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:47.022011Z","iopub.execute_input":"2025-07-09T16:38:47.022288Z","iopub.status.idle":"2025-07-09T16:38:47.771036Z","shell.execute_reply.started":"2025-07-09T16:38:47.022269Z","shell.execute_reply":"2025-07-09T16:38:47.768947Z"}},"outputs":[{"name":"stdout","text":"+----------+------+-----------+---------------------+\n|      Date|Ticker|Close Price|7 Day Rolling Average|\n+----------+------+-----------+---------------------+\n|18-06-2025|   AAD|      16.37|                16.37|\n|19-06-2025|   AAP|     159.64|               159.64|\n|11-06-2025|  AAPL|     223.41|               223.41|\n|10-06-2025|   AAY|       73.5|                 73.5|\n|20-06-2025|  ABBV|      41.21|                41.21|\n|14-06-2025|   ABT|     281.37|               281.37|\n|19-06-2025|   ABT|     151.06|              216.215|\n|14-06-2025|   ACG|      21.87|                21.87|\n|12-06-2025|   ADB|     150.74|               150.74|\n|18-06-2025|   ADB|     122.11|              136.425|\n|08-06-2025|  ADBE|     246.09|               246.09|\n|10-06-2025|   AEX|     205.81|               205.81|\n|13-06-2025|   AFL|     187.04|               187.04|\n|20-06-2025|   AFT|     257.62|               257.62|\n|02-06-2025|   AFV|     274.98|               274.98|\n|04-06-2025|   AFX|      50.68|                50.68|\n|18-06-2025|   AFY|     114.19|               114.19|\n|04-06-2025|   AGA|     182.56|               182.56|\n|19-06-2025|   AGH|     252.29|               252.29|\n|12-06-2025|   AGO|     147.44|               147.44|\n+----------+------+-----------+---------------------+\nonly showing top 20 rows\n\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# For each sector, what is the average volatility (average of daily (High Price - Low Price))?\n\nvolDf = df.withColumn(\"Volatility\", F.col(\"High Price\") - F.col(\"Low Price\"))\navgVol = volDf.groupBy(\"Sector\").avg(\"Volatility\").withColumnRenamed(\"avg(Volatility)\", \"avg_volatility\").orderBy(\"avg_volatility\", ascending = False)\navgVol.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:47.774748Z","iopub.execute_input":"2025-07-09T16:38:47.777438Z","iopub.status.idle":"2025-07-09T16:38:48.331404Z","shell.execute_reply.started":"2025-07-09T16:38:47.777401Z","shell.execute_reply":"2025-07-09T16:38:48.330613Z"}},"outputs":[{"name":"stdout","text":"+--------------------+------------------+\n|              Sector|    avg_volatility|\n+--------------------+------------------+\n|          Financials|  6.06803571428572|\n|              Energy|5.8718518518518525|\n|           Utilities| 5.857454545454543|\n|         Real Estate|5.7357615894039755|\n|Communication Ser...|  5.69279220779221|\n|    Consumer Staples| 5.690689655172414|\n|           Materials| 5.667117647058824|\n|          Healthcare|5.6285628742514975|\n|          Technology| 5.627935483870965|\n|         Industrials| 5.551686746987957|\n|Consumer Discreti...| 5.503333333333335|\n+--------------------+------------------+\n\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"# What is the total market cap by sector on the most recent date in the dataset?\n\nmaxDate = df.select(F.max(\"Date\")).collect()\nprint(maxDate[0][0])\n\ntotalMarketCap = df.select([\"Date\", \"Sector\", \"Market Cap\"])\ntotalMarketCap = totalMarketCap.filter(F.col(\"Date\") == maxDate[0][0])\ntotalMarketCap.show()\ntotalMarketCap = df.filter(F.col(\"Date\") == maxDate[0][0]).groupBy(\"Sector\").sum(\"Market Cap\")\ntotalMarketCap.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:48.333245Z","iopub.execute_input":"2025-07-09T16:38:48.333574Z","iopub.status.idle":"2025-07-09T16:38:49.136785Z","shell.execute_reply.started":"2025-07-09T16:38:48.333537Z","shell.execute_reply":"2025-07-09T16:38:49.135798Z"}},"outputs":[{"name":"stdout","text":"21-06-2025\n+----------+--------------------+----------+\n|      Date|              Sector|Market Cap|\n+----------+--------------------+----------+\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|         Industrials|2147483647|\n|21-06-2025|          Technology|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|              Energy|2147483647|\n|21-06-2025|          Financials|2147483647|\n|21-06-2025|    Consumer Staples|2147483647|\n|21-06-2025|              Energy|2147483647|\n|21-06-2025|Communication Ser...|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|          Technology|1601062355|\n|21-06-2025|         Industrials|2147483647|\n|21-06-2025|    Consumer Staples|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|          Financials|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n+----------+--------------------+----------+\nonly showing top 20 rows\n\n+--------------------+---------------+\n|              Sector|sum(Market Cap)|\n+--------------------+---------------+\n|Communication Ser...|    21474836470|\n|              Energy|    23622320117|\n|          Healthcare|     8555230998|\n|         Real Estate|    19327352823|\n|           Materials|    19327352823|\n|Consumer Discreti...|    30064771058|\n|           Utilities|     8589934588|\n|    Consumer Staples|    19327352823|\n|         Industrials|    10737418235|\n|          Technology|    16633447884|\n|          Financials|    21474836470|\n+--------------------+---------------+\n\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Which ticker has the highest average PE Ratio over the dataset?\n\nhighestPE = df.groupBy(\"Ticker\").avg(\"PE Ratio\").withColumnRenamed(\"avg(PE Ratio)\", \"Avg PE Ratio\").orderBy(\"Avg PE Ratio\", ascending = False)\nhighestPE.first()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:49.138397Z","iopub.execute_input":"2025-07-09T16:38:49.138738Z","iopub.status.idle":"2025-07-09T16:38:49.535792Z","shell.execute_reply.started":"2025-07-09T16:38:49.138709Z","shell.execute_reply":"2025-07-09T16:38:49.535013Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Row(Ticker='ZCX', Avg PE Ratio=44.0)"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"# Find the top 3 tickers with the highest dividend yield in the last month.\n\nmonthDf = df.withColumn(\"Date\", F.to_date(F.unix_timestamp(\"Date\", \"dd-MM-yyyy\").cast(\"timestamp\")))\nmonthDf = monthDf.withColumn(\"month\", F.month(F.col(\"Date\")))\nlastMonth = monthDf.filter(F.col(\"month\") == 6)\nhighestYield = lastMonth.groupBy(\"Ticker\").max(\"Dividend Yield\").withColumnRenamed(\"max(Dividend Yield)\", \"Max Dividend Yield\")\\\n                        .orderBy(\"Max Dividend Yield\", ascending = False).collect()\ntop3HighestYield = highestYield[:3]\n\nfor row in top3HighestYield:\n    print(\"Ticker: \" + row[\"Ticker\"] + \" & Dividend Yield: \" + str(row[\"Max Dividend Yield\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:49.537337Z","iopub.execute_input":"2025-07-09T16:38:49.537660Z","iopub.status.idle":"2025-07-09T16:38:50.365814Z","shell.execute_reply.started":"2025-07-09T16:38:49.537631Z","shell.execute_reply":"2025-07-09T16:38:50.364602Z"}},"outputs":[{"name":"stdout","text":"Ticker: TJL & Dividend Yield: 5\nTicker: RZE & Dividend Yield: 5\nTicker: XBV & Dividend Yield: 4\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# For each ticker, how many days did the closing price reach a new 52 Week High?\n\nweekHigh = df.withColumn(\"52 Week High Met\", F.col(\"52 Week High\") == F.col(\"Close Price\"))\nweekHigh = weekHigh.select(\"52 Week High Met\").distinct()\n# weekHigh = weekHigh.filter(F.col(\"52 Week High Met\") == True).groupBy(\"Ticker\").count()\nweekHigh.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:50.366647Z","iopub.execute_input":"2025-07-09T16:38:50.366994Z","iopub.status.idle":"2025-07-09T16:38:50.811770Z","shell.execute_reply.started":"2025-07-09T16:38:50.366964Z","shell.execute_reply":"2025-07-09T16:38:50.810768Z"}},"outputs":[{"name":"stdout","text":"+----------------+\n|52 Week High Met|\n+----------------+\n|           false|\n+----------------+\n\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Which sector had the highest average closing price over the past year?\n\nyearDf = df.withColumn(\"Date\", F.to_date(F.unix_timestamp(\"Date\", \"dd-MM-yyyy\").cast(\"timestamp\")))\nyearDf = yearDf.withColumn(\"Year\", F.year(F.col(\"Date\")))\nlastYearDf = yearDf.filter(F.col(\"Year\") == 2025)\norderedClosingPrice = lastYearDf.groupBy(\"Sector\").avg(\"Close Price\").withColumnRenamed(\"avg(Close Price)\", \"Avg Close Price\")\\\n                                .orderBy(\"Avg Close Price\", ascending = False).collect()\nhighestAvgClosingPrice = orderedClosingPrice[0]\n\nprint(\"Sector \" + highestAvgClosingPrice[\"Sector\"] + \" has the highest avg closing price of \" + str(highestAvgClosingPrice[\"Avg Close Price\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:50.812587Z","iopub.execute_input":"2025-07-09T16:38:50.813197Z","iopub.status.idle":"2025-07-09T16:38:51.437037Z","shell.execute_reply.started":"2025-07-09T16:38:50.812850Z","shell.execute_reply":"2025-07-09T16:38:51.435977Z"}},"outputs":[{"name":"stdout","text":"Sector Financials has the highest avg closing price of 165.8779166666666\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# What is the average EPS by sector?\n\nsectorDf = df.groupBy(\"Sector\").avg(\"EPS\").withColumnRenamed(\"avg(EPS)\", \"Avg EPS\")\\\n             .orderBy(\"Avg EPS\", ascending = False)\nsectorDf.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:38:51.438474Z","iopub.execute_input":"2025-07-09T16:38:51.438804Z","iopub.status.idle":"2025-07-09T16:38:51.819708Z","shell.execute_reply.started":"2025-07-09T16:38:51.438776Z","shell.execute_reply":"2025-07-09T16:38:51.818797Z"}},"outputs":[{"name":"stdout","text":"+--------------------+------------------+\n|              Sector|           Avg EPS|\n+--------------------+------------------+\n|              Energy|13.465864197530866|\n|           Utilities| 8.162424242424246|\n|          Financials| 7.945476190476189|\n|          Healthcare| 7.432035928143713|\n|Communication Ser...| 7.231688311688312|\n|           Materials|  7.11570588235294|\n|         Industrials| 7.042228915662648|\n|         Real Estate| 7.016490066225162|\n|    Consumer Staples|  6.88137931034483|\n|Consumer Discreti...| 6.634528301886791|\n|          Technology| 5.125806451612901|\n+--------------------+------------------+\n\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# For each ticker, what is the correlation between PE Ratio and Dividend Yield?\n\ncorr = df.stat.corr(\"PE Ratio\", \"Dividend Yield\")\nprint(corr)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T16:39:31.158667Z","iopub.execute_input":"2025-07-09T16:39:31.159031Z","iopub.status.idle":"2025-07-09T16:39:31.388683Z","shell.execute_reply.started":"2025-07-09T16:39:31.159005Z","shell.execute_reply":"2025-07-09T16:39:31.387294Z"}},"outputs":[{"name":"stdout","text":"-0.11046775286893819\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"# Identify the ticker(s) with the largest percentage gain from its 52 Week Low to its 52 Week High.\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}