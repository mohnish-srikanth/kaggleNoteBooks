{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceType":"datasetVersion","sourceId":12241473,"datasetId":7713196,"databundleVersionId":12787471,"isSourceIdPinned":false}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:48:59.174727Z","iopub.execute_input":"2025-07-08T06:48:59.174943Z","iopub.status.idle":"2025-07-08T06:48:59.182377Z","shell.execute_reply.started":"2025-07-08T06:48:59.174929Z","shell.execute_reply":"2025-07-08T06:48:59.181324Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/stock-market-june-2025-dataset/stock_market_june2025.csv\n","output_type":"stream"}],"execution_count":60},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"pratyushpuri/stock-market-june-2025-dataset\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:48:59.183731Z","iopub.execute_input":"2025-07-08T06:48:59.184053Z","iopub.status.idle":"2025-07-08T06:48:59.462602Z","shell.execute_reply.started":"2025-07-08T06:48:59.183992Z","shell.execute_reply":"2025-07-08T06:48:59.461841Z"}},"outputs":[{"name":"stdout","text":"Path to dataset files: /kaggle/input/stock-market-june-2025-dataset\n","output_type":"stream"}],"execution_count":61},{"cell_type":"code","source":"from pyspark.sql import SparkSession\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.types import IntegerType\nfrom pyspark.sql.types import DateType\nimport pyspark.sql.functions as F\n\nspark = SparkSession.builder.appName(\"SparkRandom\").getOrCreate()\n\ndf = spark.read.format(\"csv\").option(\"header\", True).option(\"inferSchema\", True).load(\"/kaggle/input/stock-market-june-2025-dataset/stock_market_june2025.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:48:59.463666Z","iopub.execute_input":"2025-07-08T06:48:59.463880Z","iopub.status.idle":"2025-07-08T06:48:59.659572Z","shell.execute_reply.started":"2025-07-08T06:48:59.463859Z","shell.execute_reply":"2025-07-08T06:48:59.658726Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"df = df.withColumn(\"Volume Traded\", df[\"Volume Traded\"].cast(IntegerType()))\ndf = df.withColumn(\"Market Cap\", df[\"Market Cap\"].cast(IntegerType()))\ndf = df.withColumn(\"PE Ratio\", df[\"PE Ratio\"].cast(IntegerType()))\ndf = df.withColumn(\"Dividend Yield\", df[\"Dividend Yield\"].cast(IntegerType()))\n# df = df.withColumn(\"Date\", df[\"Date\"].cast(DateType()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:48:59.661236Z","iopub.execute_input":"2025-07-08T06:48:59.662140Z","iopub.status.idle":"2025-07-08T06:48:59.709306Z","shell.execute_reply.started":"2025-07-08T06:48:59.662114Z","shell.execute_reply":"2025-07-08T06:48:59.708715Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"# What is the average daily trading volume for each ticker?\n\navgTrdVol = df.groupBy(\"Ticker\").avg(\"Volume Traded\").withColumnRenamed(\"avg(Volume Traded)\", \"avg_volume_traded\")\\\n              .orderBy(\"avg_volume_traded\", ascending = False)\navgTrdVol.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:48:59.710773Z","iopub.execute_input":"2025-07-08T06:48:59.710956Z","iopub.status.idle":"2025-07-08T06:48:59.915037Z","shell.execute_reply.started":"2025-07-08T06:48:59.710939Z","shell.execute_reply":"2025-07-08T06:48:59.914133Z"}},"outputs":[{"name":"stdout","text":"+------+-----------------+\n|Ticker|avg_volume_traded|\n+------+-----------------+\n| GOOGL|      6.5377735E7|\n| BRK.B|      5.3892654E7|\n|  AAPL|      5.0662192E7|\n|  AMZN|       5.046382E7|\n|  MSFT|      4.8301421E7|\n|  META|      4.7539626E7|\n|   UNH|      4.6928599E7|\n|  TSLA|      3.7631821E7|\n|  NVDA|      2.8192563E7|\n|   JNJ|      1.6888908E7|\n|   SHZ|      1.4994861E7|\n|   NTU|      1.4957319E7|\n|   HSC|      1.4952395E7|\n|   NFK|      1.4951806E7|\n|   IWY|      1.4941498E7|\n|   FDC|      1.4937999E7|\n|   ZZM|      1.4934516E7|\n|   ULO|      1.4924871E7|\n|   NVB|      1.4921281E7|\n|   AXP|      1.4904272E7|\n+------+-----------------+\nonly showing top 20 rows\n\n","output_type":"stream"}],"execution_count":64},{"cell_type":"code","source":"# Which ticker had the highest single-day closing price in the dataset?\n\nhighestClosingPrice = df.select([\"Ticker\", \"Close Price\"]).orderBy(\"Close Price\", ascending = False)\nhighestClosingPrice.first()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:48:59.915906Z","iopub.execute_input":"2025-07-08T06:48:59.916277Z","iopub.status.idle":"2025-07-08T06:48:59.980382Z","shell.execute_reply.started":"2025-07-08T06:48:59.916257Z","shell.execute_reply":"2025-07-08T06:48:59.979784Z"}},"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"Row(Ticker='BRK.B', Close Price=447.43)"},"metadata":{}}],"execution_count":65},{"cell_type":"code","source":"# For each ticker, what is the percentage change in closing price from the first to the last date?\n\nminDate = df.select(F.min(\"Date\")).collect()\nmaxDate = df.select(F.max(\"Date\")).collect()\n\nminDateDf = df.select([\"Ticker\", \"Close Price\"]).filter(F.col(\"Date\") == minDate[0][0]).withColumnRenamed(\"Close Price\", \"Min Date Close Price\")\nmaxDateDf = df.select([\"Ticker\", \"Close Price\"]).filter(F.col(\"Date\") == maxDate[0][0]).withColumnRenamed(\"Close Price\", \"Max Date Close Price\")\n\nminDateDf.show()\nmaxDateDf.show()\n\njoinedDf = minDateDf.join(maxDateDf, minDateDf[\"Ticker\"] == maxDateDf[\"Ticker\"], \"inner\")\njoinedDf.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:48:59.981047Z","iopub.execute_input":"2025-07-08T06:48:59.981853Z","iopub.status.idle":"2025-07-08T06:49:00.519302Z","shell.execute_reply.started":"2025-07-08T06:48:59.981835Z","shell.execute_reply":"2025-07-08T06:49:00.518274Z"}},"outputs":[{"name":"stdout","text":"+------+--------------------+\n|Ticker|Min Date Close Price|\n+------+--------------------+\n|   SLH|               34.53|\n|   WGB|              208.45|\n|   ZIN|              124.03|\n|   YPY|              265.28|\n|   VKD|              186.89|\n|   PJO|                71.2|\n|   MLK|              202.21|\n|   SFM|               59.34|\n|   PSE|                92.3|\n|   DJF|                16.1|\n|   GPH|               90.51|\n|   FUQ|               70.21|\n|   AOY|              193.54|\n|   PTR|              105.01|\n|   TTA|              210.17|\n|   XAB|              160.57|\n|   IMD|               87.92|\n|   HXJ|              160.38|\n|   RLR|              156.35|\n|   FBR|               93.64|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+\n|Ticker|Max Date Close Price|\n+------+--------------------+\n|   SRX|              241.75|\n|   DEO|              220.22|\n|   NXT|              202.63|\n|   QHY|              199.32|\n|   YQL|              229.11|\n|   OYN|               89.66|\n|   OWQ|                94.0|\n|   NIA|              194.22|\n|   UNW|               27.16|\n|   UDR|              235.13|\n|   OES|               16.92|\n|   DFX|               24.56|\n|   XBD|               65.29|\n|   BVF|              115.02|\n|   RDK|                80.6|\n|   AOI|               25.22|\n|   WWN|              125.15|\n|   YGS|               127.8|\n|   GGW|              241.26|\n|   GDG|              164.61|\n+------+--------------------+\nonly showing top 20 rows\n\n+------+--------------------+------+--------------------+\n|Ticker|Min Date Close Price|Ticker|Max Date Close Price|\n+------+--------------------+------+--------------------+\n+------+--------------------+------+--------------------+\n\n","output_type":"stream"}],"execution_count":66},{"cell_type":"code","source":"# Which ticker experienced the largest daily price swing (High Price - Low Price) and on which date?\n\nhighestSwing = df.withColumn(\"Swing\", F.col(\"High Price\") - F.col(\"Low Price\"))\nhighestSwing = highestSwing.withColumn(\"Swing\", F.abs(highestSwing[\"Swing\"])).orderBy(\"Swing\", ascending = False)\nhighestSwing = highestSwing.select([\"Ticker\", \"Swing\"])\nhighestSwing.first()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:49:00.519858Z","iopub.execute_input":"2025-07-08T06:49:00.520064Z","iopub.status.idle":"2025-07-08T06:49:00.672875Z","shell.execute_reply.started":"2025-07-08T06:49:00.520046Z","shell.execute_reply":"2025-07-08T06:49:00.672228Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"Row(Ticker='META', Swing=23.150000000000034)"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"# Calculate the rolling 7-day average closing price for each ticker.\n\nwindowSpec = Window.partitionBy(\"Ticker\").orderBy(\"Date\").rowsBetween(-6, 0)\nrollingAvg = df.withColumn(\"7 Day Rolling Average\", F.avg(F.col(\"Close Price\")).over(windowSpec))\nrollingAvg = rollingAvg.select([\"Date\", \"Ticker\", \"Close Price\", \"7 Day Rolling Average\"]).orderBy([\"Ticker\"])\nrollingAvg.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:49:00.673920Z","iopub.execute_input":"2025-07-08T06:49:00.674133Z","iopub.status.idle":"2025-07-08T06:49:01.088858Z","shell.execute_reply.started":"2025-07-08T06:49:00.674117Z","shell.execute_reply":"2025-07-08T06:49:01.088306Z"}},"outputs":[{"name":"stdout","text":"+----------+------+-----------+---------------------+\n|      Date|Ticker|Close Price|7 Day Rolling Average|\n+----------+------+-----------+---------------------+\n|18-06-2025|   AAD|      16.37|                16.37|\n|19-06-2025|   AAP|     159.64|               159.64|\n|11-06-2025|  AAPL|     223.41|               223.41|\n|10-06-2025|   AAY|       73.5|                 73.5|\n|20-06-2025|  ABBV|      41.21|                41.21|\n|14-06-2025|   ABT|     281.37|               281.37|\n|19-06-2025|   ABT|     151.06|              216.215|\n|14-06-2025|   ACG|      21.87|                21.87|\n|12-06-2025|   ADB|     150.74|               150.74|\n|18-06-2025|   ADB|     122.11|              136.425|\n|08-06-2025|  ADBE|     246.09|               246.09|\n|10-06-2025|   AEX|     205.81|               205.81|\n|13-06-2025|   AFL|     187.04|               187.04|\n|20-06-2025|   AFT|     257.62|               257.62|\n|02-06-2025|   AFV|     274.98|               274.98|\n|04-06-2025|   AFX|      50.68|                50.68|\n|18-06-2025|   AFY|     114.19|               114.19|\n|04-06-2025|   AGA|     182.56|               182.56|\n|19-06-2025|   AGH|     252.29|               252.29|\n|12-06-2025|   AGO|     147.44|               147.44|\n+----------+------+-----------+---------------------+\nonly showing top 20 rows\n\n","output_type":"stream"}],"execution_count":68},{"cell_type":"code","source":"# For each sector, what is the average volatility (average of daily (High Price - Low Price))?\n\nvolDf = df.withColumn(\"Volatility\", F.col(\"High Price\") - F.col(\"Low Price\"))\navgVol = volDf.groupBy(\"Sector\").avg(\"Volatility\").withColumnRenamed(\"avg(Volatility)\", \"avg_volatility\").orderBy(\"avg_volatility\", ascending = False)\navgVol.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:49:01.090722Z","iopub.execute_input":"2025-07-08T06:49:01.090943Z","iopub.status.idle":"2025-07-08T06:49:01.359777Z","shell.execute_reply.started":"2025-07-08T06:49:01.090914Z","shell.execute_reply":"2025-07-08T06:49:01.359225Z"}},"outputs":[{"name":"stdout","text":"+--------------------+------------------+\n|              Sector|    avg_volatility|\n+--------------------+------------------+\n|          Financials|  6.06803571428572|\n|              Energy|5.8718518518518525|\n|           Utilities| 5.857454545454543|\n|         Real Estate|5.7357615894039755|\n|Communication Ser...|  5.69279220779221|\n|    Consumer Staples| 5.690689655172414|\n|           Materials| 5.667117647058824|\n|          Healthcare|5.6285628742514975|\n|          Technology| 5.627935483870965|\n|         Industrials| 5.551686746987957|\n|Consumer Discreti...| 5.503333333333335|\n+--------------------+------------------+\n\n","output_type":"stream"}],"execution_count":69},{"cell_type":"code","source":"# What is the total market cap by sector on the most recent date in the dataset?\n\nmaxDate = df.select(F.max(\"Date\")).collect()\nprint(maxDate[0][0])\n\ntotalMarketCap = df.select([\"Date\", \"Sector\", \"Market Cap\"])\ntotalMarketCap = totalMarketCap.filter(F.col(\"Date\") == maxDate[0][0])\ntotalMarketCap.show()\ntotalMarketCap = df.filter(F.col(\"Date\") == maxDate[0][0]).groupBy(\"Sector\").sum(\"Market Cap\")\ntotalMarketCap.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:49:01.361317Z","iopub.execute_input":"2025-07-08T06:49:01.361486Z","iopub.status.idle":"2025-07-08T06:49:01.738062Z","shell.execute_reply.started":"2025-07-08T06:49:01.361471Z","shell.execute_reply":"2025-07-08T06:49:01.737294Z"}},"outputs":[{"name":"stdout","text":"21-06-2025\n+----------+--------------------+----------+\n|      Date|              Sector|Market Cap|\n+----------+--------------------+----------+\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|         Industrials|2147483647|\n|21-06-2025|          Technology|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|              Energy|2147483647|\n|21-06-2025|          Financials|2147483647|\n|21-06-2025|    Consumer Staples|2147483647|\n|21-06-2025|              Energy|2147483647|\n|21-06-2025|Communication Ser...|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|          Technology|1601062355|\n|21-06-2025|         Industrials|2147483647|\n|21-06-2025|    Consumer Staples|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|          Financials|2147483647|\n|21-06-2025|         Real Estate|2147483647|\n|21-06-2025|Consumer Discreti...|2147483647|\n+----------+--------------------+----------+\nonly showing top 20 rows\n\n+--------------------+---------------+\n|              Sector|sum(Market Cap)|\n+--------------------+---------------+\n|Communication Ser...|    21474836470|\n|              Energy|    23622320117|\n|          Healthcare|     8555230998|\n|         Real Estate|    19327352823|\n|           Materials|    19327352823|\n|Consumer Discreti...|    30064771058|\n|           Utilities|     8589934588|\n|    Consumer Staples|    19327352823|\n|         Industrials|    10737418235|\n|          Technology|    16633447884|\n|          Financials|    21474836470|\n+--------------------+---------------+\n\n","output_type":"stream"}],"execution_count":70},{"cell_type":"code","source":"# Which ticker has the highest average PE Ratio over the dataset?\n\nhighestPE = df.groupBy(\"Ticker\").avg(\"PE Ratio\").withColumnRenamed(\"avg(PE Ratio)\", \"Avg PE Ratio\").orderBy(\"Avg PE Ratio\", ascending = False)\nhighestPE.first()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:49:01.738809Z","iopub.execute_input":"2025-07-08T06:49:01.739059Z","iopub.status.idle":"2025-07-08T06:49:01.953587Z","shell.execute_reply.started":"2025-07-08T06:49:01.739043Z","shell.execute_reply":"2025-07-08T06:49:01.952670Z"}},"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"Row(Ticker='ZCX', Avg PE Ratio=44.0)"},"metadata":{}}],"execution_count":71},{"cell_type":"code","source":"# Find the top 3 tickers with the highest dividend yield in the last month.\n\nmonthDf = df.withColumn(\"month\", F.month(df[\"Date\"]))\nmonthDf.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T06:49:01.954288Z","iopub.execute_input":"2025-07-08T06:49:01.954462Z","iopub.status.idle":"2025-07-08T06:49:02.055546Z","shell.execute_reply.started":"2025-07-08T06:49:01.954447Z","shell.execute_reply":"2025-07-08T06:49:02.054897Z"}},"outputs":[{"name":"stdout","text":"+----------+------+----------+-----------+----------+---------+-------------+----------+--------+--------------+-----+------------+-----------+--------------------+-----+\n|      Date|Ticker|Open Price|Close Price|High Price|Low Price|Volume Traded|Market Cap|PE Ratio|Dividend Yield|  EPS|52 Week High|52 Week Low|              Sector|month|\n+----------+------+----------+-----------+----------+---------+-------------+----------+--------+--------------+-----+------------+-----------+--------------------+-----+\n|01-06-2025|   SLH|     34.92|      34.53|     35.22|    34.38|      2966611|2147483647|      29|             2| 1.17|       39.39|      28.44|         Industrials| NULL|\n|01-06-2025|   WGB|     206.5|     208.45|    210.51|   205.12|      1658738|2147483647|      13|             2| 16.0|      227.38|     136.79|              Energy| NULL|\n|01-06-2025|   ZIN|     125.1|     124.03|     127.4|   121.77|     10709898|2147483647|      29|             2| 4.25|      138.35|     100.69|          Healthcare| NULL|\n|01-06-2025|   YPY|    260.55|     265.28|    269.99|   256.64|     14012358|2147483647|      19|             1|13.32|      317.57|     178.26|         Industrials| NULL|\n|01-06-2025|   VKD|    182.43|     186.89|     189.4|   179.02|     14758143|2147483647|      40|             1| 4.65|      243.54|     165.53|          Technology| NULL|\n|01-06-2025|   PJO|     71.47|       71.2|     72.79|    71.07|      5719915|2147483647|      30|             2| 2.33|       82.93|      56.81|    Consumer Staples| NULL|\n|01-06-2025|   MLK|    202.91|     202.21|    205.94|   200.25|       750059|2147483647|      27|             1| 7.45|      242.53|     142.52|           Materials| NULL|\n|01-06-2025|   SFM|     60.12|      59.34|     60.83|    59.08|      3053505|2147483647|      25|             2| 2.33|       68.11|      52.66|    Consumer Staples| NULL|\n|01-06-2025|   PSE|     92.78|       92.3|     92.94|     91.3|      3260643|2147483647|      14|             0|  6.3|       105.7|      70.31|          Healthcare| NULL|\n|01-06-2025|   DJF|     16.36|       16.1|      16.4|    15.98|      3084579|2147483647|      24|             0| 0.66|       21.28|      15.22|          Financials| NULL|\n|01-06-2025|   GPH|     88.06|      90.51|     90.64|    86.96|     14070514|2147483647|      31|             2| 2.87|       97.72|      71.29|           Materials| NULL|\n|01-06-2025|   FUQ|     71.49|      70.21|      72.5|    69.94|     14402936|2147483647|      23|             3| 2.98|       84.66|       52.5|Consumer Discreti...| NULL|\n|01-06-2025|   AOY|    196.83|     193.54|    197.92|   192.94|      8501424|2147483647|      13|             3|14.33|      217.51|      139.1|           Materials| NULL|\n|01-06-2025|   PTR|    103.57|     105.01|     107.0|   103.46|      3012050|2147483647|      27|             3| 3.79|      127.27|       85.7|         Real Estate| NULL|\n|01-06-2025|   TTA|    214.55|     210.17|    217.01|    208.3|      6009493|2147483647|      25|             2| 8.11|      248.22|     169.16|          Financials| NULL|\n|01-06-2025|   XAB|    158.69|     160.57|    162.35|    158.0|      4324947|2147483647|      23|             0| 6.82|      172.46|     141.53|          Technology| NULL|\n|01-06-2025|   IMD|      86.4|      87.92|     89.04|    85.32|      3446743|2147483647|      34|             3| 2.56|      116.15|      59.56|    Consumer Staples| NULL|\n|01-06-2025|   HXJ|    156.26|     160.38|    162.84|    153.6|     14091615|2147483647|      26|             1| 6.02|      194.36|     123.34|           Materials| NULL|\n|01-06-2025|   RLR|    158.79|     156.35|     161.9|   154.98|     12641391|2147483647|      21|             3| 7.21|       204.6|     147.93|    Consumer Staples| NULL|\n|01-06-2025|   FBR|     96.35|      93.64|     97.98|    92.56|      9364658|2147483647|      17|             2| 5.46|       111.6|      76.13|Communication Ser...| NULL|\n+----------+------+----------+-----------+----------+---------+-------------+----------+--------+--------------+-----+------------+-----------+--------------------+-----+\nonly showing top 20 rows\n\n","output_type":"stream"}],"execution_count":72}]}